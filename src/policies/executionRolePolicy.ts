// Centralizes the least privilege policy for the execution role
// Note: Designed to allow Terraform (VPC/EKS modules) to create VPC/subnets/SG,
// EKS cluster and nodegroups, and associated roles/policies, plus the S3 bucket
// for tfstate. 
export function buildLeastPrivilegeExecutionPolicy(bucketName: string) {
  return {
    Version: '2012-10-17',
    Statement: [
      // S3 backend tfstate (bucket and objects)
      {
        Effect: 'Allow',
        Action: ['s3:CreateBucket'],
        Resource: '*',
      },
      {
        Effect: 'Allow',
        Action: [
          's3:ListBucket',
          's3:ListBucketVersions',
          's3:ListBucketMultipartUploads',
          's3:GetBucketLocation',
          's3:PutBucketVersioning',
          's3:PutEncryptionConfiguration',
          's3:GetEncryptionConfiguration',
          's3:PutBucketPublicAccessBlock',
          's3:DeleteBucket',
        ],
        Resource: [`arn:aws:s3:::${bucketName}`],
      },
      {
        Effect: 'Allow',
        Action: [
          's3:GetObject',
          's3:PutObject',
          's3:DeleteObject',
          's3:DeleteObjectVersion',
          's3:AbortMultipartUpload',
        ],
        Resource: [`arn:aws:s3:::${bucketName}/*`],
      },

      // EKS (cluster and nodegroups)
      {
        Effect: 'Allow',
        Action: [
          'eks:CreateCluster',
          'eks:DescribeCluster',
          'eks:DescribeUpdate',
          'eks:ListUpdates',
          'eks:CreateAccessEntry',
          'eks:AssociateAccessPolicy',
          'eks:ListAssociatedAccessPolicies',
          'eks:DisassociateAccessPolicy',
          'eks:DescribeAccessPolicy',
          'eks:ListAccessPolicies',
          'eks:DescribeAccessEntry',
          'eks:ListAccessEntries',
          'eks:UpdateAccessEntry',
          'eks:DeleteAccessEntry',
          'eks:ListClusters',
          'eks:UpdateClusterConfig',
          'eks:UpdateClusterVersion',
          'eks:DeleteCluster',
          'eks:TagResource',
          'eks:UntagResource',
          'eks:CreateNodegroup',
          'eks:DescribeNodegroup',
          'eks:ListNodegroups',
          'eks:UpdateNodegroupConfig',
          'eks:DeleteNodegroup',
        ],
        Resource: '*',
      },

      // EC2/VPC
      {
        Effect: 'Allow',
        Action: [
          'ec2:CreateVpc',
          'ec2:DeleteVpc',
          'ec2:DescribeVpcs',
          'ec2:DescribeVpcAttribute',
          'ec2:CreateSubnet',
          'ec2:DeleteSubnet',
          'ec2:DescribeSubnets',
          'ec2:ModifySubnetAttribute',
          'ec2:CreateInternetGateway',
          'ec2:AttachInternetGateway',
          'ec2:DetachInternetGateway',
          'ec2:DeleteInternetGateway',
          'ec2:DescribeInternetGateways',
          'ec2:AllocateAddress',
          'ec2:AssociateAddress',
          'ec2:DisassociateAddress',
          'ec2:ReleaseAddress',
          'ec2:DescribeAddresses',
          'ec2:CreateNatGateway',
          'ec2:DeleteNatGateway',
          'ec2:DescribeNatGateways',
          'ec2:CreateRouteTable',
          'ec2:DeleteRouteTable',
          'ec2:AssociateRouteTable',
          'ec2:DisassociateRouteTable',
          'ec2:CreateRoute',
          'ec2:DeleteRoute',
          'ec2:DescribeRouteTables',
          'ec2:CreateSecurityGroup',
          'ec2:DeleteSecurityGroup',
          'ec2:AuthorizeSecurityGroupIngress',
          'ec2:RevokeSecurityGroupIngress',
          'ec2:AuthorizeSecurityGroupEgress',
          'ec2:RevokeSecurityGroupEgress',
          'ec2:DescribeSecurityGroups',
          'ec2:ModifyVpcAttribute',
          'ec2:CreateTags',
          'ec2:DeleteTags',
          'ec2:DescribeTags',
          'ec2:CreateLaunchTemplate',
          'ec2:DeleteLaunchTemplate',
          'ec2:DescribeLaunchTemplates',
          'ec2:DescribeLaunchTemplateVersions',
          'ec2:CreateNetworkInterface',
          'ec2:DeleteNetworkInterface',
          'ec2:DescribeNetworkInterfaces',
          'ec2:DescribeAddresses',
          'ec2:DescribeAddressesAttribute',
          'ec2:DescribeSecurityGroupRules',
          'ec2:DescribeNetworkAcls',
          'ec2:CreateNetworkAclEntry',
          'ec2:DeleteNetworkAclEntry',
          'ec2:ReplaceNetworkAclEntry',
          'ec2:ReplaceNetworkAclAssociation',
          'ec2:RunInstances',
          'ec2:DescribeImages',
          'ec2:DescribeInstanceTypes',
        ],
        Resource: '*',
      },

      // KMS (cluster secrets encryption)
      {
        Effect: 'Allow',
        Action: [
          'kms:Create*',
          'kms:Describe*',
          'kms:Enable*',
          'kms:Disable*',
          'kms:Get*',
          'kms:List*',
          'kms:Put*',
          'kms:Update*',
          'kms:Delete*',
          'kms:ScheduleKeyDeletion',
          'kms:CancelKeyDeletion',
          'kms:Revoke*',
          'kms:ReplicateKey',
          'kms:ImportKeyMaterial',
          'kms:TagResource',
          'kms:UntagResource',
        ],
        Resource: '*',
      },

      // IAM (roles and policies for cluster/nodegroups; read and passrole)
      {
        Effect: 'Allow',
        Action: [
          'iam:CreateRole',
          'iam:DeleteRole',
          'iam:GetRole',
          'iam:ListRoles',
          'iam:TagRole',
          'iam:UntagRole',
          'iam:PutRolePolicy',
          'iam:DeleteRolePolicy',
          'iam:ListRolePolicies',
          'iam:AttachRolePolicy',
          'iam:DetachRolePolicy',
          'iam:CreatePolicy',
          'iam:DeletePolicy',
          'iam:GetPolicy',
          'iam:GetPolicyVersion',
          'iam:ListAttachedRolePolicies',
          'iam:ListPolicyVersions',
          'iam:CreatePolicyVersion',
          'iam:DeletePolicyVersion',
          'iam:CreateServiceLinkedRole',
          'iam:PassRole',
          'iam:CreateInstanceProfile',
          'iam:DeleteInstanceProfile',
          'iam:GetInstanceProfile',
          'iam:AddRoleToInstanceProfile',
          'iam:RemoveRoleFromInstanceProfile',
          'iam:ListInstanceProfiles',
          'iam:ListInstanceProfilesForRole',
          'iam:CreateOpenIDConnectProvider',
          'iam:GetOpenIDConnectProvider',
          'iam:TagOpenIDConnectProvider',
          'iam:UntagOpenIDConnectProvider',
          'iam:DeleteOpenIDConnectProvider',
        ],
        Resource: '*',
      },
      // ELB/ALB (used by LoadBalancer type services and health checks)
      {
        Effect: 'Allow',
        Action: [
          'elasticloadbalancing:CreateLoadBalancer',
          'elasticloadbalancing:DeleteLoadBalancer',
          'elasticloadbalancing:CreateTargetGroup',
          'elasticloadbalancing:DeleteTargetGroup',
          'elasticloadbalancing:CreateListener',
          'elasticloadbalancing:DeleteListener',
          'elasticloadbalancing:CreateRule',
          'elasticloadbalancing:DeleteRule',
          'elasticloadbalancing:ModifyLoadBalancerAttributes',
          'elasticloadbalancing:ModifyTargetGroup',
          'elasticloadbalancing:ModifyListener',
          'elasticloadbalancing:Describe*',
          'elasticloadbalancing:AddTags',
          'elasticloadbalancing:RemoveTags',
        ],
        Resource: '*',
      },

      // Auto Scaling (backend for managed nodegroups)
      {
        Effect: 'Allow',
        Action: [
          'autoscaling:Describe*',
          'autoscaling:CreateAutoScalingGroup',
          'autoscaling:UpdateAutoScalingGroup',
          'autoscaling:DeleteAutoScalingGroup',
          'autoscaling:CreateOrUpdateTags',
          'autoscaling:DeleteTags',
        ],
        Resource: '*',
      },
    ],
  } as const;
}